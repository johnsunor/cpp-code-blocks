// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai_2048.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ai_2048.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace aiproto {

namespace {

const ::google::protobuf::Descriptor* CSAI2048Tile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAI2048Tile_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCAI2048Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCAI2048Move_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MoveType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ai_5f2048_2eproto() {
  protobuf_AddDesc_ai_5f2048_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ai_2048.proto");
  GOOGLE_CHECK(file != NULL);
  CSAI2048Tile_descriptor_ = file->message_type(0);
  static const int CSAI2048Tile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAI2048Tile, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAI2048Tile, is_over_),
  };
  CSAI2048Tile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSAI2048Tile_descriptor_,
      CSAI2048Tile::default_instance_,
      CSAI2048Tile_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSAI2048Tile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAI2048Tile, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAI2048Tile, _is_default_instance_));
  SCAI2048Move_descriptor_ = file->message_type(1);
  static const int SCAI2048Move_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAI2048Move, type_),
  };
  SCAI2048Move_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SCAI2048Move_descriptor_,
      SCAI2048Move::default_instance_,
      SCAI2048Move_offsets_,
      -1,
      -1,
      -1,
      sizeof(SCAI2048Move),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAI2048Move, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAI2048Move, _is_default_instance_));
  MoveType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ai_5f2048_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSAI2048Tile_descriptor_, &CSAI2048Tile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SCAI2048Move_descriptor_, &SCAI2048Move::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ai_5f2048_2eproto() {
  delete CSAI2048Tile::default_instance_;
  delete CSAI2048Tile_reflection_;
  delete SCAI2048Move::default_instance_;
  delete SCAI2048Move_reflection_;
}

void protobuf_AddDesc_ai_5f2048_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rai_2048.proto\022\007aiproto\"-\n\014CSAI2048Tile"
    "\022\014\n\004data\030\001 \003(\005\022\017\n\007is_over\030\002 \001(\010\"/\n\014SCAI2"
    "048Move\022\037\n\004type\030\001 \001(\0162\021.aiproto.MoveType"
    "*1\n\010MoveType\022\006\n\002UP\020\000\022\t\n\005RIGHT\020\001\022\010\n\004DOWN\020"
    "\002\022\010\n\004LEFT\020\003b\006proto3", 179);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ai_2048.proto", &protobuf_RegisterTypes);
  CSAI2048Tile::default_instance_ = new CSAI2048Tile();
  SCAI2048Move::default_instance_ = new SCAI2048Move();
  CSAI2048Tile::default_instance_->InitAsDefaultInstance();
  SCAI2048Move::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ai_5f2048_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ai_5f2048_2eproto {
  StaticDescriptorInitializer_ai_5f2048_2eproto() {
    protobuf_AddDesc_ai_5f2048_2eproto();
  }
} static_descriptor_initializer_ai_5f2048_2eproto_;
const ::google::protobuf::EnumDescriptor* MoveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveType_descriptor_;
}
bool MoveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSAI2048Tile::kDataFieldNumber;
const int CSAI2048Tile::kIsOverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSAI2048Tile::CSAI2048Tile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiproto.CSAI2048Tile)
}

void CSAI2048Tile::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSAI2048Tile::CSAI2048Tile(const CSAI2048Tile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aiproto.CSAI2048Tile)
}

void CSAI2048Tile::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_over_ = false;
}

CSAI2048Tile::~CSAI2048Tile() {
  // @@protoc_insertion_point(destructor:aiproto.CSAI2048Tile)
  SharedDtor();
}

void CSAI2048Tile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAI2048Tile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAI2048Tile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAI2048Tile_descriptor_;
}

const CSAI2048Tile& CSAI2048Tile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ai_5f2048_2eproto();
  return *default_instance_;
}

CSAI2048Tile* CSAI2048Tile::default_instance_ = NULL;

CSAI2048Tile* CSAI2048Tile::New(::google::protobuf::Arena* arena) const {
  CSAI2048Tile* n = new CSAI2048Tile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSAI2048Tile::Clear() {
  is_over_ = false;
  data_.Clear();
}

bool CSAI2048Tile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiproto.CSAI2048Tile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 data = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_over;
        break;
      }

      // optional bool is_over = 2;
      case 2: {
        if (tag == 16) {
         parse_is_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_over_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiproto.CSAI2048Tile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiproto.CSAI2048Tile)
  return false;
#undef DO_
}

void CSAI2048Tile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiproto.CSAI2048Tile)
  // repeated int32 data = 1;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  // optional bool is_over = 2;
  if (this->is_over() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_over(), output);
  }

  // @@protoc_insertion_point(serialize_end:aiproto.CSAI2048Tile)
}

::google::protobuf::uint8* CSAI2048Tile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiproto.CSAI2048Tile)
  // repeated int32 data = 1;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data(i), target);
  }

  // optional bool is_over = 2;
  if (this->is_over() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_over(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiproto.CSAI2048Tile)
  return target;
}

int CSAI2048Tile::ByteSize() const {
  int total_size = 0;

  // optional bool is_over = 2;
  if (this->is_over() != 0) {
    total_size += 1 + 1;
  }

  // repeated int32 data = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAI2048Tile::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSAI2048Tile* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSAI2048Tile>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAI2048Tile::MergeFrom(const CSAI2048Tile& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from.is_over() != 0) {
    set_is_over(from.is_over());
  }
}

void CSAI2048Tile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAI2048Tile::CopyFrom(const CSAI2048Tile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAI2048Tile::IsInitialized() const {

  return true;
}

void CSAI2048Tile::Swap(CSAI2048Tile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSAI2048Tile::InternalSwap(CSAI2048Tile* other) {
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(is_over_, other->is_over_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSAI2048Tile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAI2048Tile_descriptor_;
  metadata.reflection = CSAI2048Tile_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSAI2048Tile

// repeated int32 data = 1;
int CSAI2048Tile::data_size() const {
  return data_.size();
}
void CSAI2048Tile::clear_data() {
  data_.Clear();
}
 ::google::protobuf::int32 CSAI2048Tile::data(int index) const {
  // @@protoc_insertion_point(field_get:aiproto.CSAI2048Tile.data)
  return data_.Get(index);
}
 void CSAI2048Tile::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:aiproto.CSAI2048Tile.data)
}
 void CSAI2048Tile::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:aiproto.CSAI2048Tile.data)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CSAI2048Tile::data() const {
  // @@protoc_insertion_point(field_list:aiproto.CSAI2048Tile.data)
  return data_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CSAI2048Tile::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:aiproto.CSAI2048Tile.data)
  return &data_;
}

// optional bool is_over = 2;
void CSAI2048Tile::clear_is_over() {
  is_over_ = false;
}
 bool CSAI2048Tile::is_over() const {
  // @@protoc_insertion_point(field_get:aiproto.CSAI2048Tile.is_over)
  return is_over_;
}
 void CSAI2048Tile::set_is_over(bool value) {
  
  is_over_ = value;
  // @@protoc_insertion_point(field_set:aiproto.CSAI2048Tile.is_over)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SCAI2048Move::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SCAI2048Move::SCAI2048Move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiproto.SCAI2048Move)
}

void SCAI2048Move::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SCAI2048Move::SCAI2048Move(const SCAI2048Move& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aiproto.SCAI2048Move)
}

void SCAI2048Move::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

SCAI2048Move::~SCAI2048Move() {
  // @@protoc_insertion_point(destructor:aiproto.SCAI2048Move)
  SharedDtor();
}

void SCAI2048Move::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCAI2048Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCAI2048Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCAI2048Move_descriptor_;
}

const SCAI2048Move& SCAI2048Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ai_5f2048_2eproto();
  return *default_instance_;
}

SCAI2048Move* SCAI2048Move::default_instance_ = NULL;

SCAI2048Move* SCAI2048Move::New(::google::protobuf::Arena* arena) const {
  SCAI2048Move* n = new SCAI2048Move;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCAI2048Move::Clear() {
  type_ = 0;
}

bool SCAI2048Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiproto.SCAI2048Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .aiproto.MoveType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aiproto::MoveType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiproto.SCAI2048Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiproto.SCAI2048Move)
  return false;
#undef DO_
}

void SCAI2048Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiproto.SCAI2048Move)
  // optional .aiproto.MoveType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:aiproto.SCAI2048Move)
}

::google::protobuf::uint8* SCAI2048Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiproto.SCAI2048Move)
  // optional .aiproto.MoveType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiproto.SCAI2048Move)
  return target;
}

int SCAI2048Move::ByteSize() const {
  int total_size = 0;

  // optional .aiproto.MoveType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCAI2048Move::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SCAI2048Move* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SCAI2048Move>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCAI2048Move::MergeFrom(const SCAI2048Move& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SCAI2048Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCAI2048Move::CopyFrom(const SCAI2048Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCAI2048Move::IsInitialized() const {

  return true;
}

void SCAI2048Move::Swap(SCAI2048Move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCAI2048Move::InternalSwap(SCAI2048Move* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCAI2048Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCAI2048Move_descriptor_;
  metadata.reflection = SCAI2048Move_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SCAI2048Move

// optional .aiproto.MoveType type = 1;
void SCAI2048Move::clear_type() {
  type_ = 0;
}
 ::aiproto::MoveType SCAI2048Move::type() const {
  // @@protoc_insertion_point(field_get:aiproto.SCAI2048Move.type)
  return static_cast< ::aiproto::MoveType >(type_);
}
 void SCAI2048Move::set_type(::aiproto::MoveType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aiproto.SCAI2048Move.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace aiproto

// @@protoc_insertion_point(global_scope)
