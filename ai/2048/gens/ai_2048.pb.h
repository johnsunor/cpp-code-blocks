// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai_2048.proto

#ifndef PROTOBUF_ai_5f2048_2eproto__INCLUDED
#define PROTOBUF_ai_5f2048_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace aiproto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ai_5f2048_2eproto();
void protobuf_AssignDesc_ai_5f2048_2eproto();
void protobuf_ShutdownFile_ai_5f2048_2eproto();

class CSAI2048Tile;
class SCAI2048Move;

enum MoveType {
  UP = 0,
  RIGHT = 1,
  DOWN = 2,
  LEFT = 3,
  MoveType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MoveType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MoveType_IsValid(int value);
const MoveType MoveType_MIN = UP;
const MoveType MoveType_MAX = LEFT;
const int MoveType_ARRAYSIZE = MoveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MoveType_descriptor();
inline const ::std::string& MoveType_Name(MoveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MoveType_descriptor(), value);
}
inline bool MoveType_Parse(
    const ::std::string& name, MoveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MoveType>(
    MoveType_descriptor(), name, value);
}
// ===================================================================

class CSAI2048Tile : public ::google::protobuf::Message {
 public:
  CSAI2048Tile();
  virtual ~CSAI2048Tile();

  CSAI2048Tile(const CSAI2048Tile& from);

  inline CSAI2048Tile& operator=(const CSAI2048Tile& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSAI2048Tile& default_instance();

  void Swap(CSAI2048Tile* other);

  // implements Message ----------------------------------------------

  inline CSAI2048Tile* New() const { return New(NULL); }

  CSAI2048Tile* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSAI2048Tile& from);
  void MergeFrom(const CSAI2048Tile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSAI2048Tile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  ::google::protobuf::int32 data(int index) const;
  void set_data(int index, ::google::protobuf::int32 value);
  void add_data(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // optional bool is_over = 2;
  void clear_is_over();
  static const int kIsOverFieldNumber = 2;
  bool is_over() const;
  void set_is_over(bool value);

  // @@protoc_insertion_point(class_scope:aiproto.CSAI2048Tile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  bool is_over_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ai_5f2048_2eproto();
  friend void protobuf_AssignDesc_ai_5f2048_2eproto();
  friend void protobuf_ShutdownFile_ai_5f2048_2eproto();

  void InitAsDefaultInstance();
  static CSAI2048Tile* default_instance_;
};
// -------------------------------------------------------------------

class SCAI2048Move : public ::google::protobuf::Message {
 public:
  SCAI2048Move();
  virtual ~SCAI2048Move();

  SCAI2048Move(const SCAI2048Move& from);

  inline SCAI2048Move& operator=(const SCAI2048Move& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCAI2048Move& default_instance();

  void Swap(SCAI2048Move* other);

  // implements Message ----------------------------------------------

  inline SCAI2048Move* New() const { return New(NULL); }

  SCAI2048Move* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCAI2048Move& from);
  void MergeFrom(const SCAI2048Move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SCAI2048Move* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aiproto.MoveType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::aiproto::MoveType type() const;
  void set_type(::aiproto::MoveType value);

  // @@protoc_insertion_point(class_scope:aiproto.SCAI2048Move)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ai_5f2048_2eproto();
  friend void protobuf_AssignDesc_ai_5f2048_2eproto();
  friend void protobuf_ShutdownFile_ai_5f2048_2eproto();

  void InitAsDefaultInstance();
  static SCAI2048Move* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CSAI2048Tile

// repeated int32 data = 1;
inline int CSAI2048Tile::data_size() const {
  return data_.size();
}
inline void CSAI2048Tile::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 CSAI2048Tile::data(int index) const {
  // @@protoc_insertion_point(field_get:aiproto.CSAI2048Tile.data)
  return data_.Get(index);
}
inline void CSAI2048Tile::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:aiproto.CSAI2048Tile.data)
}
inline void CSAI2048Tile::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:aiproto.CSAI2048Tile.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CSAI2048Tile::data() const {
  // @@protoc_insertion_point(field_list:aiproto.CSAI2048Tile.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CSAI2048Tile::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:aiproto.CSAI2048Tile.data)
  return &data_;
}

// optional bool is_over = 2;
inline void CSAI2048Tile::clear_is_over() {
  is_over_ = false;
}
inline bool CSAI2048Tile::is_over() const {
  // @@protoc_insertion_point(field_get:aiproto.CSAI2048Tile.is_over)
  return is_over_;
}
inline void CSAI2048Tile::set_is_over(bool value) {
  
  is_over_ = value;
  // @@protoc_insertion_point(field_set:aiproto.CSAI2048Tile.is_over)
}

// -------------------------------------------------------------------

// SCAI2048Move

// optional .aiproto.MoveType type = 1;
inline void SCAI2048Move::clear_type() {
  type_ = 0;
}
inline ::aiproto::MoveType SCAI2048Move::type() const {
  // @@protoc_insertion_point(field_get:aiproto.SCAI2048Move.type)
  return static_cast< ::aiproto::MoveType >(type_);
}
inline void SCAI2048Move::set_type(::aiproto::MoveType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aiproto.SCAI2048Move.type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aiproto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aiproto::MoveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aiproto::MoveType>() {
  return ::aiproto::MoveType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ai_5f2048_2eproto__INCLUDED
